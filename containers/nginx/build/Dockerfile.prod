#########################################################################################
# nginx configuration 
#########################################################################################

ARG CUSTOM_BUILD_VERSION
ARG CUSTOM_BUILD_DATE
ARG CUSTOM_BUILD_UID

ARG NGINX_VERSION

FROM nginx:${NGINX_VERSION}-alpine AS nginx-builder

ARG CUSTOM_BUILD_VERSION
ARG CUSTOM_BUILD_DATE
ARG CUSTOM_BUILD_UID

ARG NGINX_VERSION
ARG NGINX_HEADERS_MORE_VERSION

# getting the source 
RUN wget "http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz" -O nginx.tar.gz && \
    wget "https://github.com/openresty/headers-more-nginx-module/archive/v${NGINX_HEADERS_MORE_VERSION}.tar.gz" -O headers-more.tar.gz

# build deps 
RUN apk add --no-cache --virtual .build-deps \
  git \
  gcc \
  libc-dev \
  make \
  openssl-dev \
  pcre-dev \
  zlib-dev \
  linux-headers \
  curl \
  gnupg \
  libxslt-dev \
  gd-dev \
  geoip-dev

RUN mkdir -p /usr/src

# Reuse same cli arguments as the nginx:alpine image used to build
RUN CONFARGS=$(nginx -V 2>&1 | sed -n -e 's/^.*arguments: //p') \
	tar -zxC /usr/src -f "nginx.tar.gz"

RUN tar -zxvC /usr/src -f "headers-more.tar.gz"

RUN HEADERSMOREDIR="/usr/src/headers-more-nginx-module-${NGINX_HEADERS_MORE_VERSION}  " && \
  cd /usr/src/nginx-$NGINX_VERSION && \
  ./configure --without-http_autoindex_module --with-compat $CONFARGS --add-dynamic-module=$HEADERSMOREDIR && \
  make && make install



#########################################################################################
# react build in node environment
#########################################################################################

FROM node:current-alpine3.18 as build

WORKDIR /lab-lin

COPY package.json ./
COPY package-lock.json ./

RUN npm ci
RUN npm install -g react-script

COPY . ./

#npm run build
RUN INLINE_RUNTIME_CHUNK=false npm run build

#########################################################################################
# production environment
#########################################################################################

#FROM nginx:${NGINX_VERSION}-alpine as final
FROM nginxinc/nginx-unprivileged:${NGINX_VERSION}-alpine3.18 as final

COPY --from=nginx-builder /usr/local/nginx/modules/ngx_http_headers_more_filter_module.so /usr/local/nginx/modules/ngx_http_headers_more_filter_module.so

USER root

# add bash for debugging purpose !! not prod
RUN apk update && apk add --no-cache bash

ARG DOCROOT=/usr/share/nginx/html
COPY --from=build --chown=nobody:nobody /lab-lin/build ${DOCROOT}
COPY containers/nginx/configuration/templates/molecules.conf /etc/nginx/conf.d/default.conf
COPY containers/nginx/configuration/templates/nginx.conf /etc/nginx/nginx.conf

RUN find ${DOCROOT} -type d -print0 | xargs -0 chmod 755 && \
    find ${DOCROOT} -type f -print0 | xargs -0 chmod 644 && \
    chmod 755 ${DOCROOT}

# nginx in prod
#RUN --mount=type=secret,id=nginxConf \
#    cp /run/secrets/nginxConf /etc/nginx/conf.d/default.conf
# add secret in docker compose

# Check the nginx configuration
#RUN nginx -V
USER nginx
RUN nginx -t

EXPOSE 8080

CMD ["nginx", "-g", "daemon off;"]
#CMD ["/bin/bash"]